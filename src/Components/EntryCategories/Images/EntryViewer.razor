@inherits Base.EntryViewerBase

@using Conesoft.Files
@using System.Reflection
@using Conesoft.Website.Files.Services

@inject NavigationManager nav

<title style="display: none">@Path.Split('/').Last().Replace("%20", " ").Replace(".", " ")</title>
<img fullscreen-viewer src="/*/@Path" />

<label id="togglenav" fullscreen-viewer>

    <nav fullscreen-viewer>
        <button disabled=@string.IsNullOrWhiteSpace(previousLink) @onclick=GoToPrevious id="backward">
            <img src="https://cdn.conesoft.net/icons/skip-backward.svg" />
        </button>
        <button disabled=@string.IsNullOrWhiteSpace(nextLink) @onclick=GoToNext id="forward">
            <img src="https://cdn.conesoft.net/icons/skip-forward.svg" />
        </button>
    </nav>
</label>


@code {
    string? previousLink = null;
    string? nextLink = null;

    protected override void OnInitialized()
    {
        var roots = HostingPaths.GetRoots();

        var fileroot = string.Join("/", Path.Split("/").SkipLast(1));

        var directories = roots.Select(p => (p / (fileroot ?? "")).AsDirectory).NotNull();

        /* needs fixing, needs filter for categories own files .. */
        var images = directories.SelectMany(d => d.Files);

        var current = roots.Select(p => (p / (Path.Replace("/", "\\") ?? "")).AsFile).NotNull().First();
        var previous = images.Reverse().SkipWhile(i => i.Path != current.Path).Skip(1).FirstOrDefault();
        var next = images.SkipWhile(i => i.Path != current.Path).Skip(1).FirstOrDefault();

        var segments = Path.Split("/").Count();

        previousLink = previous != null ? string.Join("/", previous.Path.Split("\\").Reverse().Take(segments).Reverse()) : null;
        nextLink = next != null ? string.Join("/", next.Path.Split("\\").Reverse().Take(segments).Reverse()) : "";
    }

    public void GoToPrevious()
    {
        nav.NavigateTo(previousLink!, forceLoad: true);
    }

    public void GoToNext()
    {
        nav.NavigateTo(nextLink!, forceLoad: true);
    }

    protected override Task OnLiveChange() => Task.CompletedTask;
}
