@using Conesoft.Website.Files.Components.Controls.FileRenderers
@inherits DefaultTypeRenderer

@code {
    public override bool InCategory(Entry entry) => entry.IsFile && "log".Contains(entry.AsFile!.Extension[1..]);

    private static IComparer<string> nsc = new Conesoft.Tools.NaturalSortComparer(inAscendingOrder: true);

    public override IComparer<Entry> Comparer => Comparer<Entry>.Create((a, b) =>
    {
        var namepart_a = string.Join(" ", a.Name.Split(" ")[..^1]);
        var namepart_b = string.Join(" ", b.Name.Split(" ")[..^1]);

        var datepart_a = a.Name.Split(" ").Last();
        datepart_a = $"{datepart_a[0..4]}-{datepart_a[4..6]}-{datepart_a[6..8]}";
        DateTime.TryParse(datepart_a, out var date_a);

        var datepart_b = b.Name.Split(" ").Last();
        datepart_b = $"{datepart_b[0..4]}-{datepart_b[4..6]}-{datepart_b[6..8]}";
        DateTime.TryParse(datepart_b, out var date_b);

        var date_compare = -date_a.CompareTo(date_b);
        var name_compare = nsc.Compare(namepart_a, namepart_b);
        return date_compare != 0 ? date_compare : name_compare;
    });
}
    @{
    var type = Type.GetType($"Conesoft.Website.Files.Components.Controls.FileRenderers.LogFileRenderer")
    ?? typeof(Controls.FileRenderers.DefaultFileRenderer);

    var parameters = new Dictionary<string, object>
            {
                ["Current"] = Current,
                ["Path"] = Path
            };
}

<DynamicComponent Type="@type" Parameters="@parameters" />