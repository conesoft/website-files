@using System.Globalization
@inject IJSRuntime JsRuntime

@code {
    [Parameter] public Conesoft.Files.File Current { get; set; } = default!;
    [Parameter] public string Path { get; set; } = "";
}
@if (Current.Exists)
{
    var namepart = string.Join(" ", Current.NameWithoutExtension.Split(" ")[..^1]);
    var datepart = Current.NameWithoutExtension.Split(" ").Last();
    datepart = $"{datepart[0..4]}-{datepart[4..6]}-{datepart[6..8]}";
    DateTime.TryParse(datepart, out var date);

    <li @key=Current.Path>
        <img src="/file-icon.svg" />
        <section>
            <a href="@($"{Path}/{Current.Name}")" target="_top">@Current.NameWithoutExtension</a>
            <ul class="levels">
                @foreach (var level in levels)
                {
                    <li class="@level.ToLowerInvariant()">@level</li>
                }
            </ul>
            <date>@date.ToString("D", new CultureInfo("en-US"))</date>
            <aside>@date.Humanize()</aside>
            <b>@Current.Info.Length.Bytes().Humanize()</b>
        </section>
        <menu>
            <li>
                <a href="*/@($"{Path}/{Current.Name}")" download="" title="download">▼</a>
            </li>
            <AuthorizeView Roles="Admin, Editor">
                <Authorized>
                    <li dangerous>
                        <a title="delete" @onclick="@DeleteFile" @onclick:preventDefault=true @onclick:stopPropagation=true>✕</a>
                    </li>
                </Authorized>
            </AuthorizeView>
        </menu>
    </li>
}

@code {

    HashSet<string> levels = [];

    string[] alllevels = ["Fatal", "Error", "Verbose", "Debug", "Warning"];

    long? length = null;
    bool render = false;

    protected override bool ShouldRender() => render;

    protected override async Task OnParametersSetAsync()
    {
        render = length != Current.Info.Length || levels.Count == 0;
        length = Current.Info.Length;

        if (RendererInfo.IsInteractive)
        {
            using var fileStream = new FileStream(Current.Path, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);
            using var streamReader = new StreamReader(fileStream);

            var all = alllevels.ToHashSet();

            int linecounter = 0;
            var typecounter = 0;

            while ((await streamReader.ReadLineAsync()) is string line)
            {
                var type = alllevels.FirstOrDefault(level => line.Contains($"\"@l\":\"{level}\"")) ?? "Information";
                levels.Add(type);
                all.Remove(type);

                linecounter++;
                if (linecounter % 10 == 0)
                {
                    if (levels.Count != typecounter)
                    {
                        typecounter = levels.Count;
                        StateHasChanged();
                    }
                }

                if (all.Count == 0)
                {
                    break;
                }
            }

            StateHasChanged();
        }
    }

    public async Task DeleteFile()
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", $"Are you sure?\n{Current.Path}");
        if (confirmed)
        {
            Current.Delete();
        }
    }
}