@using Conesoft.Tools
@using Serilog
@implements IDisposable
@inject FileHostingPaths paths

<BreadCrumbs Path="@Url" />

<MetaData Path="@Url" />

<main>
    <section>
        <pre>
            @text
        </pre>
    </section>
</main>

@code {
    [Parameter]
    public string Url { get; set; } = "";

    string title = "";
    string text = "";

    CancellationTokenSource? cancellationTokenSource = null;

    public void Dispose()
    {
        if (cancellationTokenSource != null)
        {
            Log.Information("Dispose: Cancel()");
            cancellationTokenSource?.Cancel();
            GC.Collect(GC.MaxGeneration, GCCollectionMode.Aggressive, true, true);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender) 
        {
            var file = (await paths.GetRoots()).Select(p => (p / Url).AsFile).NotNull().First();

            title = file.Name;

            if (file != null)
            {
                var _ = Task.Run(async () =>
                {
                    try
                    {
                        cancellationTokenSource = new();

                        await foreach (var entries in file.Live(cancellationTokenSource.Token))
                        {
                            using var fileStream = new FileStream(file.Path, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);
                            using var streamReader = new StreamReader(fileStream);
                            text = streamReader.ReadToEnd();
                            await InvokeAsync(StateHasChanged);
                        }
                    }
                    catch (OperationCanceledException)
                    {
                    }
                });
            }
        }
    }
}