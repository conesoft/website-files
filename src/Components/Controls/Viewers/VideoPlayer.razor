@using System
@using Blazored.Video.Support
@using Blazored.Video

@rendermode InteractiveServer

@inject IJSRuntime js

@code {
    public string FullTitle => System.IO.Path.GetFileNameWithoutExtension(Url.Split('/').Last().Replace("%20", " ")).Replace(".", " ");
    public string EpisodeTitle => FullTitle.Split(" ").ToArray() switch
    {
        var split when split.Length > 1 && split[0].Contains("x") => string.Join(" ", split.Skip(1)),
        _ => FullTitle
    };
}
 
<AuthorizeView>
    <Authorized>
        <PageTitle>@FullTitle</PageTitle>
        @{
            var subtitle = Url[..^3] + "vtt";
        }
        @* <video fullscreen-viewer src="/*/@Url" controls autoplay></video> *@

        <BlazoredVideo @ref=video style="pointer-events: none; background-color: var(--background-color)" fullscreen-viewer autoplay preload="auto" VideoEventOptions="options" DurationChange="OnDurationChange" TimeUpdate="OnTimeUpdate">
            <source src="/*/@Url" />
            <track label="English"
                   kind="subtitles"
                   srclang="en"
                   src="/*/@subtitle"
                   default />
        </BlazoredVideo>

        <section fullscreen-viewer>
            <h1 id="title">@EpisodeTitle.Trim(' ', '-')</h1>
            <nav @onkeydown=HandleKeyboard>
                @if (mute == false)
                {
                    <button id="mute" @onclick=Mute>
                        <img src="https://cdn.conesoft.net/icons/mute.svg" />
                    </button>
                }
                else
                {
                    <button id="mute" @onclick=Unmute>
                        <img src="https://cdn.conesoft.net/icons/unmute.svg" />
                    </button>
                }
                <button id="backward" @onclick=BackwardSkip>
                    <img src="https://cdn.conesoft.net/icons/skip-backward.svg" />
                </button>
                @if (playing == false)
                {
                    <button id="play" @onclick=Play>
                        <img src="https://cdn.conesoft.net/icons/play.svg" />
                    </button>
                }
                else
                {
                    <button id="play" @onclick=Pause>
                        <img src="https://cdn.conesoft.net/icons/pause.svg" />
                    </button>
                }
                <button id="forward" @onclick=ForwardSkip>
                    <img src="https://cdn.conesoft.net/icons/skip-forward.svg" />
                </button>
                @if (fullscreen == false)
                {
                    <button id="maximize" @onclick=EnterFullscreen>
                        <img src="https://cdn.conesoft.net/icons/enter-fullscreen.svg" />
                    </button>
                }
                else
                {
                    <button id="maximize" @onclick=ExitFullscreen>
                        <img src="https://cdn.conesoft.net/icons/exit-fullscreen.svg" />
                    </button>
                }

                <Conesoft.Website.Files.Components.Controls.ProgressSlider LeftText=@($"{currentTime:hh\\:mm\\:ss}")
                                                                           MiddleText=@(scrubbingTime.HasValue ? $"{scrubbingTime:hh\\:mm\\:ss}" : "")
                                                                           RightText=@($"{runTime:hh\\:mm\\:ss}")
                                                                           Value="@(100 * currentTime / runTime)"
                                                                           Scrubbing="Scrubbing"
                                                                           style="grid-area: progress; font-size: 0.8rem" />
            </nav>
        </section>
    </Authorized>
</AuthorizeView>


@code {
    [Parameter]
    public string Url { get; set; } = "";

    BlazoredVideo? video;
    bool playing = true;
    bool fullscreen = false;
    bool mute = false;
    TimeSpan currentTime = new();
    TimeSpan runTime = new();
    TimeSpan? scrubbingTime = null;
    // bool selecting = false;
    // double selectedRange = 0;
    // double? scrubbingValue;

    Dictionary<VideoEvents, VideoStateOptions> options = new()
        {
            [VideoEvents.TimeUpdate] = new VideoStateOptions { CurrentTime = true, Duration = true },
            [VideoEvents.DurationChange] = new VideoStateOptions { Duration = true }
        };

    public void OnTimeUpdate(VideoState state)
    {
        currentTime = TimeSpan.FromSeconds(state.CurrentTime);
        if (runTime == TimeSpan.Zero)
        {
            OnDurationChange(state);
        }
        StateHasChanged();
    }

    public void OnDurationChange(VideoState state)
    {
        runTime = TimeSpan.FromSeconds(state.Duration);
        StateHasChanged();
    }

    public async Task Scrubbing(double? value)
    {
        if (value.HasValue)
        {
            scrubbingTime = runTime * value.Value / 100;
        }
        else
        {
            if (scrubbingTime.HasValue && video != null)
            {
                await video.SetCurrentTimeAsync(scrubbingTime!.Value.TotalSeconds);
            }
            scrubbingTime = null;
        }
    }

    public async Task Play()
    {
        if (video != null)
        {
            await video.StartPlayback();
            playing = true;
        }
    }

    public async Task Pause()
    {
        if (video != null)
        {
            await video.PausePlayback();
        }
        playing = false;
    }

    public async Task TogglePlayPause()
    {
        if (playing == false)
        {
            await Play();
        }
        else
        {
            await Pause();
        }
    }

    public async Task BackwardSkip()
    {
        if (video != null)
        {
            await video.SetCurrentTimeAsync(-10 + await video.GetCurrentTimeAsync());
        }
    }

    public async Task ForwardSkip()
    {
        if (video != null)
        {
            await video.SetCurrentTimeAsync(10 + await video.GetCurrentTimeAsync());
        }
    }

    public async Task EnterFullscreen()
    {
        await js.InvokeVoidAsync("document.documentElement.requestFullscreen");
        fullscreen = true;
    }

    public async Task ToggleFullscreen()
    {
        if (fullscreen == false)
        {
            await EnterFullscreen();
        }
        else
        {
            await ExitFullscreen();
        }
    }

    public async Task ExitFullscreen()
    {
        await js.InvokeVoidAsync("document.exitFullscreen");
        fullscreen = false;
    }

    public async Task Mute()
    {
        if (video != null)
        {
            await video.SetVolumeAsync(0);
        }
        mute = true;
    }

    public async Task Unmute()
    {
        if (video != null)
        {
            await video.SetVolumeAsync(1);
            mute = false;
        }
    }



    [JSInvokable]
    public static async Task HandleKeyboard(KeyboardEventArgs args)
    {
        if (current != null)
        {
            switch (args.Key)
            {
                case " ":
                    await current.TogglePlayPause();
                    break;
                case "f":
                    await current.ToggleFullscreen();
                    break;
            }
        }
    }

    static VideoPlayer? current = null;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var title = System.IO.Path.GetFileNameWithoutExtension(string.Join(' ', Uri.UnescapeDataString(Url.Split("/").Reverse().FirstOrDefault() ?? "").Split(' ').Skip(1)));
            title = title.StartsWith("- ") ? title[2..] : title;
            var artist = Uri.UnescapeDataString(string.Join(": ", Url.Split('/', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries).Skip(1).Reverse().Skip(2).Reverse())) + ": " + Uri.UnescapeDataString(Url.Split("/").Reverse().Skip(1).FirstOrDefault() ?? "");
            var image = $"/*/{Url}:thumbnail-x256.jpg";

            var module = await js.InvokeAsync<IJSObjectReference>("import", "/Components/Controls/Viewers/VideoPlayer.razor.js");
            await module.InvokeVoidAsync("updateMediaSession", title, artist, image);
            await module.InvokeVoidAsync("registerGlobalKeyboardEvents", typeof(Program).Assembly.FullName!.Split(',').First(), "HandleKeyboard");
            current = this;
        }
        await base.OnAfterRenderAsync(firstRender);
    }
}
