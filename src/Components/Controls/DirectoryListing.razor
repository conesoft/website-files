@using Conesoft.Website.Files.Services
@using System.Reflection
@using Conesoft.Tools
@using Conesoft.Website.Files.Components.Controls.TypeRenderers
@using Microsoft.AspNetCore.Authorization
@using Serilog

@implements IDisposable
@inject FileHostingPaths fileHostingPaths

<main>
    @foreach (var group in GroupedEntries(Entries))
    {
        <section title="@group.Key.Name">
            <ul>
                @foreach (var entry in group.OrderBy(e => e, group.Key.Comparer).DistinctBy(e => e.Name))
                {
                    var parameters = new Dictionary<string, object>
                    {
                        ["Current"] = entry,
                        ["Path"] = Path
                    };
                    <DynamicComponent Type=group.Key.GetType() Parameters=parameters />
                }
            </ul>
        </section>
    }
    <StoragePoolSpace />
</main>

@code {
    string? _path = null;
    [Parameter] public string Path { get; set; } = default!;

    IEnumerable<Conesoft.Files.Entry> Entries = [];

    static HashSet<DefaultTypeRenderer> categoryRenderTypes = new();
    IEnumerable<IGrouping<DefaultTypeRenderer, Conesoft.Files.Entry>> GroupedEntries(IEnumerable<Conesoft.Files.Entry> entries)
    {
        if (categoryRenderTypes.Count == 0)
        {
            var types = Assembly.GetExecutingAssembly().GetTypes().Where(t => t.Name.EndsWith("TypeRenderer") && !t.Name.EndsWith("DefaultTypeRenderer")).ToArray();
            categoryRenderTypes = types.Select(t => (Activator.CreateInstance(t) as DefaultTypeRenderer)).NotNull().ToHashSet();
        }
        var @default = Activator.CreateInstance<DefaultTypeRenderer>();
        return entries.GroupBy(e => categoryRenderTypes.FirstOrDefault(c => c.InCategory(e)) ?? @default).OrderBy(g => g.Key.Name != null);
    }

    CancellationTokenSource? cancellationTokenSource = null;
    public void Dispose() => cancellationTokenSource?.Cancel();

    protected override async Task OnParametersSetAsync()
    {
        var roots = fileHostingPaths.DirectoriesAt(Path);

        cancellationTokenSource = await roots.Live(async () =>
        {
            Entries = roots.Entries().ToArray();
            await InvokeAsync(StateHasChanged);
        });
    }
}