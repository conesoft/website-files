@using System.Reflection
@using Conesoft.Website.Files.Components.Controls.TypeRenderers
@inject FileHostingPaths fileHostingPaths

@rendermode InteractiveServer

@code {
    [Parameter] public string Path { get; set; } = "";
    IEnumerable<Conesoft.Files.Directory> Roots => fileHostingPaths.Roots.Select(p => p / Path);
}

<CascadingAuthenticationState>
    <AuthorizeView>
        <Authorized>
            @if (Roots.Where(r => r.Exists).SelectMany(d => d.Directories).Where(d => d.Info.Attributes.HasFlag(FileAttributes.Hidden) == false).Any())
            {
                <section>
                    <ul>
                        @foreach (var directory in Roots
                            .Where(r => r.Exists)
                            .SelectMany(d => d.Directories)
                            .Where(d => d.Info.Attributes.HasFlag(FileAttributes.Hidden) == false)
                            .OrderBy(d => d.Name, new Conesoft.Tools.NaturalSortComparer())
                            .DistinctBy(d => d.Name)
                        )
                        {
                            <Directory Path="@Path" Current="@directory" />
                        }
                    </ul>
                </section>
            }
            @if (Roots.Where(r => r.Exists).SelectMany(d => d.Files).Any())
            {
                @foreach (var group in GroupedFiles(Roots.Where(r => r.Exists).SelectMany(d => d.Files).Where(f => f.Info.Attributes.HasFlag(FileAttributes.Hidden) == false)))
                {
                    <section>
                        <header>@group.Key.Name.Replace("TypeRenderer", "").Replace("Default", "Files")</header>
                        <ul>
                            @foreach (var file in group.OrderBy(d => d.Name, new Conesoft.Tools.NaturalSortComparer()))
                            {
                                <File Path="@Path" Current="@file" />
                            }
                        </ul>
                    </section>
                }
            }
        </Authorized>
    </AuthorizeView>
</CascadingAuthenticationState>

@code {
    IEnumerable<IGrouping<Type, Conesoft.Files.File>> GroupedFiles(IEnumerable<Conesoft.Files.File> files)
    {
        var types = Assembly.GetExecutingAssembly().GetTypes().Where(t => t.Name.EndsWith("TypeRenderer"));

        return files.GroupBy(f =>
        {

            var type = types.FirstOrDefault(
                t => (Activator.CreateInstance(t) as DefaultTypeRenderer)!.Extensions.Contains(f.Extension.ToLower()[1..]),
                typeof(DefaultTypeRenderer)
            );

            return type;
        });
    }

    protected override Task OnInitializedAsync()
    {
        var roots = fileHostingPaths.Roots.Select(p => p / Path);
        roots.AsParallel().ForAll(async root =>
        {
            if(root.Exists)
            {
                await foreach (var files in root.Live().Changes())
                {
                    await InvokeAsync(StateHasChanged);
                }
            }
        });
        return Task.CompletedTask;
    }
}