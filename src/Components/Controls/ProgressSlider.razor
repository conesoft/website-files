<div class="slider" @attributes="@InputAttributes">
    <div class="background"></div>
    <progress min=0 max=100 value="@value"></progress>
    <input type=range min=0 max=100 step=0.1
    @bind-value=value
    @bind-value:event="oninput"
    @bind-value:after="Refresh"
    @onpointerdown="PointerDown"
    @onpointerup="PointerUp">
    <p class="lefttext">@LeftText</p>
    <p class="middletext">@MiddleText</p>
    <p class="righttext">@RightText</p>
</div>

@code {
    private double value;
    private bool scrubbing;

    [Parameter]
#pragma warning disable BL0007
    public double Value {
        get => value;
        set
        {
            if(scrubbing == false)
            {
                this.value = value;
            }
        }
    }
#pragma warning restore BL0007

    [Parameter]
    public string LeftText { get; set; } = "";
    [Parameter]
    public string MiddleText { get; set; } = "";
    [Parameter]
    public string RightText { get; set; } = "";

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> InputAttributes { get; set; } = new();

    [Parameter]
    public Func<double?, Task>? Scrubbing { get; set; }

    public Task PointerDown()
    {
        scrubbing = true;
        return Task.CompletedTask;
    }

    public async Task PointerUp()
    {
        await (Scrubbing?.Invoke(null) ?? Task.CompletedTask);
        scrubbing = false;
    }

    public async Task Refresh()
    {
        if (Scrubbing != null)
        {
            await Scrubbing(value);
        }
    }
}